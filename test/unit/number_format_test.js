module("number formatter test");

test("Formatted number", function() {
    equal(TimeSeries.numberFormatFunctions.numberFormatter("4<8", 1), "14444444", "Forces the field to be left-aligned within the available space");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("4>8", 1), "44444441", "Forces the field to be right-aligned within the available space (This is the default)");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("4^8", 1), "44441444", "Forces the field to be centered within the available space");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("+", 123), "+123", "a positive sign should be used for positive numbers");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("+", -123), "-123", "a positive sign should be used for negative numbers");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("-", 123), "123", "No sign should be usedfor positive numbers");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("-", -123), "-123", "a sign should be used for negative numbers (This is the default)");
    equal(TimeSeries.numberFormatFunctions.numberFormatter(" ", 123), " 123", "a leading space should be used on positive numbers");
    equal(TimeSeries.numberFormatFunctions.numberFormatter(" ", -123), "-123", "a minus sign should be used on negative numbers");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("$", 123), "$123", "a currency symbol prefixed (or suffixed) per the locale.");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("#0b", 123), "0b1111011", "binary prefix by '0b'");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("#0o", 123), "0o173", "octal prefix by '0o'");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("#0x", 123), "0x7b", "hexadecimal prefix by '0x'");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("8", 123), "     123", "specified a minimum width that the output string of the formatter needs to have");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("08", 123), "00000123", "the width parameter is prepended with a 0 to add zeros in front of the string");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("e", 1234567), "1.234567e+6", "to exponential");
    equal(TimeSeries.numberFormatFunctions.numberFormatter(".4g", 21245.989898), "2.125e+4", "to precision");
    equal(TimeSeries.numberFormatFunctions.numberFormatter(".4g", 21.245989898), "21.25", "to precision");
    equal(TimeSeries.numberFormatFunctions.numberFormatter(".4f", 21245.989898), "21245.9899", "to fixed");
    equal(TimeSeries.numberFormatFunctions.numberFormatter(".4r", 21245.989898), "21250", "round to precision significant digits, padding with zeroes where necessary in similar fashion to fixed ('f'). If no precision is specified, falls back to general notation");
    equal(TimeSeries.numberFormatFunctions.numberFormatter(".4r", 21.245989898), "21.25", "round to precision significant digits, padding with zeroes where necessary in similar fashion to fixed ('f'). If no precision is specified, falls back to general notation");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("d", 123.0), "123", "to string");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("d", 123.01), "", "to string but ignore any non-integer values");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("%", 1), "100%", "like fixed, but multiply by 100 and suffix with '%'");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("%", 0.999), "100%", "like fixed, but multiply by 100 and suffix with '%'");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("%", +0.12), "12%", "like fixed, but multiply by 100 and suffix with '%'");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("%", -0.12), "-12%", "like fixed, but multiply by 100 and suffix with '%'");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("p", 1), "100%", "like fixed, but multiply by 100 and suffix with '%'");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("p", 0.999), "99.9%", "like fixed, but multiply by 100 and suffix with '%'");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("p", +0.12), "12%", "like fixed, but multiply by 100 and suffix with '%'");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("p", -0.12), "-12%", "like rounded, but multiply by 100 and suffix with '%'");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("b", 1), "1", "outputs the number in base 2");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("b", 8), "1000", "outputs the number in base 2");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("b", 16), "10000", "outputs the number in base 2");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("b", 2012), "11111011100", "outputs the number in base 2");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("o", 1), "1", "outputs the number in base 8");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("o", 8), "10", "outputs the number in base 8");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("o", 16), "20", "outputs the number in base 8");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("o", 2012), "3734", "outputs the number in base 8");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("x", 17), "11", "outputs the number in base 16, using lower-case letters for the digits above 9");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("x", 2012), "7dc", "outputs the number in base 16, using lower-case letters for the digits above 9");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("X", 17), "11", "outputs the number in base 16, using upper-case letters for the digits above 9");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("X", 2012), "7DC", "outputs the number in base 16, using upper-case letters for the digits above 9");
    equal(encodeURIComponent(TimeSeries.numberFormatFunctions.numberFormatter("c", 1000)), "%CF%A8", "converts the integer to the corresponding unicode character before printing");
    equal(TimeSeries.numberFormatFunctions.numberFormatter("s", 1000), "1k", "like rounded, but with a unit suffixed such as '9.5M' for mega, or '1.00µ'' for micro");
    equal(encodeURIComponent(TimeSeries.numberFormatFunctions.numberFormatter("s", 0.000001)), "1%C2%B5", "like rounded, but with a unit suffixed such as '9.5M' for mega, or '1.00µ'' for micro");
});
